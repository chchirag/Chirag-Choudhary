from tkinter import *
import random
import networkx as nx
from operator import itemgetter

G2 = nx.read_edgelist('Facebook_Dataset.txt', create_using = nx.Graph(), nodetype = int)



def friends(graph, user):
    return set(graph.neighbors(user))


def friends_of_friends(graph, user):
    x=[]
    for each in graph.neighbors(user):
        for item in graph.neighbors(each):
            x.append(item)
    return set(x)
   
def common_friends(graph, user1, user2):
    x1 = friends(graph, user1)
    x2 = friends(graph, user2)
    return set(x1&x2)
    

def number_of_common_friends_map(graph, user):
    new_dict = dict()
    for each in list(graph.nodes()):
        if(each!=user):
            if(each not in list(graph.neighbors(user))):
                new_dict[each] = len(common_friends(graph,each,user))
    return new_dict


def number_map_to_sorted_list(map):
    map = sorted(map.items(), key = itemgetter(1), reverse=True)
    return map


def recommend_by_number_of_common_friends(graph, user):
  
    diction = dict()
    diction = number_of_common_friends_map(graph,user)
    diction = number_map_to_sorted_list(diction)
    recommendations = []
    for i in range(0,10):
        recommendations.append(diction[i])
    return recommendations


def calc_score(graph, user, each):
    score = 0
    common = common_friends(graph, user, each)
    for item in common:
        score = score + 1/(len(friends(graph, item)))
    return score
    
    
def influence_map(graph, user):
    influence_scores = dict()
    for each in list(graph.nodes()):
        if(each != user):
            score = calc_score(graph, user, each)
            influence_scores[each] = score
    return influence_scores
    

def recommend_by_influence(graph, user):
    recommendations = []
    d=influence_map(graph,user)
    d = sorted(d.items(), key = itemgetter(1), reverse=True)
    for i in range(0,10):
        recommendations.append(d[i])
    return recommendations


def return_pure_list(recommendations):
    pure_list = []
    for each in recommendations:
        pure_list.append(each[0])
    return pure_list



def compute_avg_rank(G):
    avg=0
    AVG=0
    l=[]
    for i in range(0,1000):
        f1 = random.choice(list(G.nodes()))
        f2 = random.choice(list(G.nodes()))
        if(f1!=f2):
            if(G.has_edge(f1,f2)):
                G.remove_edge(f1,f2)
                l1 = recommend_by_number_of_common_friends(G,f1)
                l2 = recommend_by_number_of_common_friends(G,f2)
                L1 = recommend_by_influence(G,f1)
                L2 = recommend_by_influence(G,f2)
                if f1 in return_pure_list(l2) and f2 in return_pure_list(l1):
                    r1 = return_pure_list(l2).index(f1)
                    r2 = return_pure_list(l1).index(f2)
                    avg=avg+(r1+r2)/2
                if f1 in return_pure_list(L2) and f2 in return_pure_list(L1):
                    R1 = return_pure_list(L2).index(f1)
                    R2 = return_pure_list(L1).index(f2)
                    AVG=AVG+(R1+R2)/2
        G.add_edge(f1,f2)
    l.append(avg)
    l.append(AVG)
    print("Average Rank of Method 1: ")
    print(l[0])
    print("Average rank of Method 2: ")
    print(l[1])
    return l



def same_and_different_recommendations(graph):
    res=[]
    count_same, count_diff = 0,0
    for i in range(0,4039):
        l1,l2 = [], []
        l1 = return_pure_list(recommend_by_number_of_common_friends(graph, i))
        l2 = return_pure_list(recommend_by_influence(graph, i))
        if(l1 == l2):
            count_same = count_same + 1
        else:
            count_diff = count_diff +1
    res.append(count_same)
    res.append(count_diff)
    print("Number of Same recommendations from both methods: ")
    print(res[0])
    print("Number of different recommendations from both methods: ")
    print(res[1])
    return res
 
    
def most_common(lst):
    return max(set(lst), key=lst.count)



def predict_lonely_nodes(graph):
    res_2=[]
    alones=[]
    for i in range(0,graph.number_of_nodes()):
        l_2 = return_pure_list(recommend_by_influence(graph,i))
        res_2.append(l_2[9])
    for i in range(0,10):
        lonely = most_common(res_2)
        alones.append(lonely)
        res_2.remove(lonely)
    new_dict = dict()
    for i in range(0,10):
        new_dict[alones[i]] = nx.clustering(graph, alones[i])
    return alones
    

def show(graph, user):
    l1=recommend_by_influence(graph, user)
    l1=[i[0] for i in l1]
    l2=recommend_by_number_of_common_friends(graph, user)
    l2=[i[0] for i in l2]
    return l1,l2

    

def submit():
  num=name_var.get()
  if(num.isdigit() is True):
    k,l=show(G2,int(num))
    st="Recommendations by neighbourhood method:\n"+str(k)+"\nRecommendations by model based method:\n"+str(l)
    print(st)
    lab.config(text=st)
    m=predict_lonely_nodes(G2)
    st+="\nLonely Nodes:\n"+str(m)
    print("Lonely Nodes:\n"+str(m))
    lab.config(text=st)
    
  else:
    lab.config(text="Invalid Input")
  name_var.set("")

ws = Tk()
ws.geometry('500x200')
ws.title('PythonGuides')
name_var=StringVar()
frame = Frame(ws)
name_entry = Entry(frame,textvariable = name_var, font=('calibre',10,'normal'),bg="Paleturquoise4")
bt=Button(frame,text="Recommend",bg="aquamarine4",command=submit)
lab=Label(frame,text="Enter The unique node ID",font=('calibre',10,'normal'),bg="Paleturquoise4",anchor=W)
name_entry.grid(row=0,column=1)
bt.grid(row=2,column=1)
lab.grid(row=4,column=1)
frame.configure(bg="DarkSlateGray4")
ws.configure(bg="DarkSlateGray4")
frame.pack()
ws.mainloop()
